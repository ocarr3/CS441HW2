// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.hellogrpc.hello


object lambdaQueryGrpc {
  val METHOD_CHECK_LOG_BOOL: _root_.io.grpc.MethodDescriptor[com.hellogrpc.hello.lambdaInvoke, com.hellogrpc.hello.lambdaResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("com.hellogrpc.lambdaQuery", "checkLogBool"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.hellogrpc.hello.lambdaInvoke])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.hellogrpc.hello.lambdaResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(com.hellogrpc.hello.HelloProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("com.hellogrpc.lambdaQuery")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(com.hellogrpc.hello.HelloProto.javaDescriptor))
      .addMethod(METHOD_CHECK_LOG_BOOL)
      .build()
  
  trait lambdaQuery extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion = lambdaQuery
    def checkLogBool(request: com.hellogrpc.hello.lambdaInvoke): scala.concurrent.Future[com.hellogrpc.hello.lambdaResponse]
  }
  
  object lambdaQuery extends _root_.scalapb.grpc.ServiceCompanion[lambdaQuery] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[lambdaQuery] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = com.hellogrpc.hello.HelloProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = com.hellogrpc.hello.HelloProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: lambdaQuery, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_CHECK_LOG_BOOL,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[com.hellogrpc.hello.lambdaInvoke, com.hellogrpc.hello.lambdaResponse] {
          override def invoke(request: com.hellogrpc.hello.lambdaInvoke, observer: _root_.io.grpc.stub.StreamObserver[com.hellogrpc.hello.lambdaResponse]): _root_.scala.Unit =
            serviceImpl.checkLogBool(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .build()
  }
  
  trait lambdaQueryBlockingClient {
    def serviceCompanion = lambdaQuery
    def checkLogBool(request: com.hellogrpc.hello.lambdaInvoke): com.hellogrpc.hello.lambdaResponse
  }
  
  class lambdaQueryBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[lambdaQueryBlockingStub](channel, options) with lambdaQueryBlockingClient {
    override def checkLogBool(request: com.hellogrpc.hello.lambdaInvoke): com.hellogrpc.hello.lambdaResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CHECK_LOG_BOOL, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): lambdaQueryBlockingStub = new lambdaQueryBlockingStub(channel, options)
  }
  
  class lambdaQueryStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[lambdaQueryStub](channel, options) with lambdaQuery {
    override def checkLogBool(request: com.hellogrpc.hello.lambdaInvoke): scala.concurrent.Future[com.hellogrpc.hello.lambdaResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CHECK_LOG_BOOL, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): lambdaQueryStub = new lambdaQueryStub(channel, options)
  }
  
  object lambdaQueryStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[lambdaQueryStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): lambdaQueryStub = new lambdaQueryStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[lambdaQueryStub] = this
  }
  
  def bindService(serviceImpl: lambdaQuery, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = lambdaQuery.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): lambdaQueryBlockingStub = new lambdaQueryBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): lambdaQueryStub = new lambdaQueryStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = com.hellogrpc.hello.HelloProto.javaDescriptor.getServices().get(0)
  
}